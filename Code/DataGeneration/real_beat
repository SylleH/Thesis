
//Alexander Heinlein's code for real hearbeat
##########################################################################################

// we are in the unsteady part

   		Real a0    = 11.693284502463376;

   		Real a[20] = {1.420706949636449,-0.937457438404759,0.281479818173732,-0.224724363786734,0.080426469802665,0.032077024077824,0.039516941555861,

   					0.032666881040235,-0.019948718147876,0.006998975442773,-0.033021060067630,-0.015708267688123,-0.029038419813160,-0.003001255512608,-0.009549531539299,

   					 0.007112349455861,0.001970095816773,0.015306208420903,0.006772571935245,0.009480436178357};

   		Real b[20] = {-1.325494054863285,0.192277311734674,0.115316087615845,-0.067714675760648,0.207297536049255,-0.044080204999886,0.050362628821152,-0.063456242820606,

   				-0.002046987314705,-0.042350454615554,-0.013150127522194,-0.010408847105535,0.011590255438424,0.013281630639807,0.014991955865968,0.016514327477078,

   				 0.013717154383988,0.012016806933609,-0.003415634499995,0.003188511626163};



   		Q = 0.5*a0;



   		Real t_min = FlowConditions::t_start_unsteady;

   		Real t_max = t_min + 1.0; // One heartbeat lasts in 1.0 second



   		Real x = M_PI * ( 2 * ( currentTime-t_min ) / ( t_max - t_min ) - 1 );



   		for ( int i = 0; i < 20; i++){

   			Q += ( a[i]*std::cos((i+1)*x) + b[i]*std::sin((i+1)*x) );

   		}



   		// Remove initial offset due to FFT

   		Q -= 0.026039341343493;