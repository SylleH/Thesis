/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 -0.08 0);

boundaryField
{
    front
    {
        type            empty;
    }

    back
    {
        type            empty;
    }

    bottom
    {
        type            zeroGradient;
    }

    left
    {
        type            noSlip;
    }
    
    top
    {
	type		codedFixedValue;
	value 		uniform (0 -0.08 0);

	name		ParabolicTimeDependentU_max;

	code
	#{
		const vectorField& Cf = patch().Cf();
		vectorField& field = *this;

		const scalar r = 10.0*1e-3;
		const scalar rcm = r*100;
		scalar 	t = this->db().time().value();
		scalar	tau = fmod(t,1);
		scalar	Uvar = 0.08;
		
   		const scalar a0    = 97.4;
scalar a[14]={-6.12644665,-42.59636182,-0.77437875,10.78546692,-6.90775766,-1.1372423,2.37198109,-0.7100494,0.39921836,1.42133022,2.57732891,-1.19777814,-2.20580923,1.37967485};

   		scalar b[14]={-48.95362598,-2.15308961,26.22974423,-3.63331624,-3.37693086,6.26447831,-0.08230374,0.14968907,1.30674276,0.74004953,-1.46645236,-3.36070789,1.00422553,0.08805414};
   		scalar Q = 0.5*a0;
   		const scalar t_min = 0;
   		const scalar t_max = t_min + 1.0;
   		scalar n = M_PI * ( 2 * ( tau-t_min ) / ( t_max - t_min ) - 1 );
		
		if (tau > 0 && tau <= 1)
		{
			for (int i = 0; i < 10; i++)
			{
   			Q += ( a[i]*cos((i+1)*n) + b[i]*sin((i+1)*n) );
   			}
			Uvar = Q/(M_PI*(rcm*rcm));
			Uvar = Uvar/100;
		}
		
		forAll(Cf, faceI)
		{
			const scalar x = Cf[faceI][0];
			const scalar y = Cf[faceI][1];
			field[faceI] = vector(0, Uvar*(-1+((x*x)/(r*r))), 0);
		}
	#};
    }
    
    right
    {
        type            noSlip;
    }

    inner_arc
    {
        type            noSlip;
    }

}

// ************************************************************************* //
