/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
    version	9;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 -0.08 0);

boundaryField
{
    front
    {
        type            empty;
    }

    back
    {
        type            empty;
    }

    bottom
    {
        type            zeroGradient;
    }

    left
    {
        type            noSlip;
    }
    
    top
    {
	type		codedFixedValue;
	value 		uniform (0 -0.08 0);

	name		ParabolicTimeDependentU_max;

	code
	#{
		const vectorField& Cf = patch().Cf();
		vectorField& field = *this;

		const scalar r = 7.75*1e-3;
		const scalar Umax = 0.4;
		const scalar Umin = 0.02;

		scalar 	Uvar = 0.08;
		scalar 	t = this->db().time().value();
		scalar	tau = fmod(t,1);
		
		if (tau > 0 && tau <= 0.35)
		{
			Uvar = 0.08+Umax*(1-(pow(tau-0.175,2)/(0.175*0.175)));
		}
		if (tau > 0.35 && tau <= 0.6)
		{
			Uvar = 0.08+Umin*(-1+(pow(tau-0.475,2)/(0.125*0.125)));
		}
		if (tau > 0.6 && tau <= 1)
		{
			Uvar = 0.08;
		}
		
		forAll(Cf, faceI)
		{
			const scalar x = Cf[faceI][0];
			const scalar y = Cf[faceI][1];
			field[faceI] = vector(0, Uvar*(-1+((x*x)/(r*r))), 0);
		}
	#};

    }

    right_main
    {
        type            noSlip;
    }
    
    right_branch
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
